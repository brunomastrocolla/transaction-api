// Code generated by MockGen. DO NOT EDIT.
// Source: handler/handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountHandler is a mock of AccountHandler interface.
type MockAccountHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccountHandlerMockRecorder
}

// MockAccountHandlerMockRecorder is the mock recorder for MockAccountHandler.
type MockAccountHandlerMockRecorder struct {
	mock *MockAccountHandler
}

// NewMockAccountHandler creates a new mock instance.
func NewMockAccountHandler(ctrl *gomock.Controller) *MockAccountHandler {
	mock := &MockAccountHandler{ctrl: ctrl}
	mock.recorder = &MockAccountHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountHandler) EXPECT() *MockAccountHandlerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccountHandler) Get(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", w, r)
}

// Get indicates an expected call of Get.
func (mr *MockAccountHandlerMockRecorder) Get(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountHandler)(nil).Get), w, r)
}

// Post mocks base method.
func (m *MockAccountHandler) Post(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Post", w, r)
}

// Post indicates an expected call of Post.
func (mr *MockAccountHandlerMockRecorder) Post(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockAccountHandler)(nil).Post), w, r)
}

// MockTransactionHandler is a mock of TransactionHandler interface.
type MockTransactionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionHandlerMockRecorder
}

// MockTransactionHandlerMockRecorder is the mock recorder for MockTransactionHandler.
type MockTransactionHandlerMockRecorder struct {
	mock *MockTransactionHandler
}

// NewMockTransactionHandler creates a new mock instance.
func NewMockTransactionHandler(ctrl *gomock.Controller) *MockTransactionHandler {
	mock := &MockTransactionHandler{ctrl: ctrl}
	mock.recorder = &MockTransactionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionHandler) EXPECT() *MockTransactionHandlerMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockTransactionHandler) Post(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Post", w, r)
}

// Post indicates an expected call of Post.
func (mr *MockTransactionHandlerMockRecorder) Post(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockTransactionHandler)(nil).Post), w, r)
}
